{
  "name": "Voice AI Professional Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "voice-trigger",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "voice-webhook",
      "name": "Voice Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "voice-trigger"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "customer-service",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "customer-service-webhook",
      "name": "Customer Service Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 500],
      "webhookId": "customer-service"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "email-callback",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "email-callback-webhook",
      "name": "Email Callback Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 700],
      "webhookId": "email-callback"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "event-type",
              "leftValue": "={{$json.event}}",
              "rightValue": "call_started",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "call-started-filter",
      "name": "Call Started Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "event-type",
              "leftValue": "={{$json.event}}",
              "rightValue": "transcript",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "transcript-filter",
      "name": "Transcript Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 500]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "event-type",
              "leftValue": "={{$json.event}}",
              "rightValue": "call_ended",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "call-ended-filter",
      "name": "Call Ended Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 700]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "user-id",
              "name": "user_id",
              "value": "={{$json.user_id || $json.call_id}}",
              "type": "string"
            },
            {
              "id": "call-id",
              "name": "call_id",
              "value": "={{$json.call_id}}",
              "type": "string"
            },
            {
              "id": "phone-number",
              "name": "phone_number",
              "value": "={{$json.phone_number}}",
              "type": "string"
            },
            {
              "id": "event-type",
              "name": "event_type",
              "value": "={{$json.event}}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{$now}}",
              "type": "string"
            },
            {
              "id": "timezone",
              "name": "timezone",
              "value": "={{$json.timezone || 'America/New_York'}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-call-data",
      "name": "Extract Call Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [680, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "user-id",
              "name": "user_id",
              "value": "={{$json.user_id || $json.call_id}}",
              "type": "string"
            },
            {
              "id": "transcript",
              "name": "transcript",
              "value": "={{$json.transcript}}",
              "type": "string"
            },
            {
              "id": "confidence",
              "name": "confidence",
              "value": "={{$json.confidence}}",
              "type": "number"
            },
            {
              "id": "speaker",
              "name": "speaker",
              "value": "={{$json.speaker}}",
              "type": "string"
            },
            {
              "id": "sentiment",
              "name": "sentiment",
              "value": "={{$json.sentiment || 'neutral'}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-transcript-data",
      "name": "Extract Transcript Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [680, 500]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://localhost:8001/memory/{{$json.user_id}}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "get-user-memory",
      "name": "Get User Memory",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8080/rag/query",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{$json.transcript}}"
            },
            {
              "name": "user_id",
              "value": "={{$json.user_id}}"
            },
            {
              "name": "context",
              "value": "={{$json.memory?.conversation_history || []}}"
            },
            {
              "name": "sentiment",
              "value": "={{$json.sentiment}}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "rag-query",
      "name": "RAG Query",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 500]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "conversation-entry",
              "name": "conversation_entry",
              "value": "={{{\"role\": \"user\", \"content\": $json.transcript, \"timestamp\": $now, \"confidence\": $json.confidence, \"sentiment\": $json.sentiment}}}",
              "type": "object"
            },
            {
              "id": "memory-data",
              "name": "memory_data",
              "value": "={{$('Get User Memory').item.json}}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-memory-update",
      "name": "Prepare Memory Update",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8001/memory/{{$json.user_id}}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "conversation_history",
              "value": "={{$json.memory_data?.conversation_history || [] + $json.conversation_entry}}"
            },
            {
              "name": "preferences",
              "value": "={{$json.memory_data?.preferences || {}}}"
            },
            {
              "name": "last_interaction",
              "value": "={{$now}}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "update-memory",
      "name": "Update Memory",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "rag-response",
              "name": "rag_response",
              "value": "={{$('RAG Query').item.json}}",
              "type": "object"
            },
            {
              "id": "assistant-response",
              "name": "assistant_response",
              "value": "={{{\"role\": \"assistant\", \"content\": $json.rag_response?.answer || \"I'm sorry, I don't have information about that.\", \"timestamp\": $now, \"source\": \"RAG\", \"confidence\": 0.9}}}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-assistant-response",
      "name": "Prepare Assistant Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8001/memory/{{$json.user_id}}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "conversation_history",
              "value": "={{$json.memory_data?.conversation_history || [] + $json.assistant_response}}"
            },
            {
              "name": "preferences",
              "value": "={{$json.memory_data?.preferences || {}}}"
            },
            {
              "name": "last_interaction",
              "value": "={{$now}}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "update-memory-with-response",
      "name": "Update Memory with Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.vapi.ai/assistants/{{$json.assistant_id}}/function-calls",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "call_id",
              "value": "={{$json.call_id}}"
            },
            {
              "name": "function_name",
              "value": "send_response"
            },
            {
              "name": "arguments",
              "value": "={{{\"message\": $json.assistant_response.content, \"confidence\": 0.9}}}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "send-vapi-response",
      "name": "Send VAPI Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8001/memory/{{$json.user_id}}/summary",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "call_summary",
              "value": "={{{\"call_id\": $json.call_id, \"duration\": $json.duration, \"outcome\": $json.outcome, \"timestamp\": $now, \"sentiment\": $json.sentiment}}}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "create-call-summary",
      "name": "Create Call Summary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 900]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.gohighlevel.com/v1/contacts/",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "firstName",
              "value": "={{$json.user_id}}"
            },
            {
              "name": "phone",
              "value": "={{$json.phone_number}}"
            },
            {
              "name": "source",
              "value": "Voice AI Call"
            },
            {
              "name": "tags",
              "value": "Voice AI, Automated Call"
            },
            {
              "name": "customField",
              "value": "={{$json.call_summary}}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "create-ghl-contact",
      "name": "Create GHL Contact",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 900]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "email-data",
              "name": "email_data",
              "value": "={{{\"to\": $json.user_email || $json.phone_number + \"@sms.email\", \"subject\": \"Voice AI Call Summary\", \"body\": \"Thank you for your call. Here's your summary: \" + $json.call_summary, \"timezone\": $json.timezone}}}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-email-data",
      "name": "Prepare Email Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 900]
    },
    {
      "parameters": {
        "fromEmail": "={{$env.EMAIL_USERNAME}}",
        "toEmail": "={{$json.email_data.to}}",
        "subject": "={{$json.email_data.subject}}",
        "text": "={{$json.email_data.body}}",
        "options": {}
      },
      "id": "send-followup-email",
      "name": "Send Follow-up Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [1340, 900]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "schedule-data",
              "name": "schedule_data",
              "value": "={{{\"user_id\": $json.user_id, \"timezone\": $json.timezone, \"callback_time\": $now, \"followup_type\": \"24h\"}}}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-schedule-data",
      "name": "Prepare Schedule Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1560, 900]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 24
            }
          ]
        },
        "options": {}
      },
      "id": "schedule-followup",
      "name": "Schedule Follow-up",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [1780, 900]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "log-entry",
              "name": "log_entry",
              "value": "={{{\"timestamp\": $now, \"event\": $json.event_type, \"user_id\": $json.user_id, \"call_id\": $json.call_id, \"status\": \"processed\", \"email_sent\": true, \"followup_scheduled\": true}}}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "log-processing",
      "name": "Log Processing",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [2000, 900]
    }
  ],
  "connections": {
    "Voice Webhook": {
      "main": [
        [
          {
            "node": "Call Started Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Customer Service Webhook": {
      "main": [
        [
          {
            "node": "Transcript Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Callback Webhook": {
      "main": [
        [
          {
            "node": "Call Ended Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Started Filter": {
      "main": [
        [
          {
            "node": "Extract Call Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcript Filter": {
      "main": [
        [
          {
            "node": "Extract Transcript Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Ended Filter": {
      "main": [
        [
          {
            "node": "Create Call Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Call Data": {
      "main": [
        [
          {
            "node": "Get User Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Transcript Data": {
      "main": [
        [
          {
            "node": "RAG Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Memory": {
      "main": [
        [
          {
            "node": "Prepare Memory Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG Query": {
      "main": [
        [
          {
            "node": "Prepare Assistant Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Memory Update": {
      "main": [
        [
          {
            "node": "Update Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Assistant Response": {
      "main": [
        [
          {
            "node": "Update Memory with Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Memory with Response": {
      "main": [
        [
          {
            "node": "Send VAPI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Call Summary": {
      "main": [
        [
          {
            "node": "Create GHL Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create GHL Contact": {
      "main": [
        [
          {
            "node": "Prepare Email Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Email Data": {
      "main": [
        [
          {
            "node": "Send Follow-up Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Follow-up Email": {
      "main": [
        [
          {
            "node": "Prepare Schedule Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Schedule Data": {
      "main": [
        [
          {
            "node": "Schedule Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Follow-up": {
      "main": [
        [
          {
            "node": "Log Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-09T09:00:00.000Z",
      "updatedAt": "2025-01-09T09:00:00.000Z",
      "id": "voice-ai-workflow",
      "name": "Voice AI Professional"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-09T09:00:00.000Z",
  "versionId": "2"
} 
